// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// Create provides a mock function with given fields: bin
func (_m *Handler) Create(bin *interface{}) (string, error) {
	ret := _m.Called(bin)

	var r0 string
	if rf, ok := ret.Get(0).(func(*interface{}) string); ok {
		r0 = rf(bin)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*interface{}) error); ok {
		r1 = rf(bin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: accountID, ID
func (_m *Handler) Delete(accountID string, ID string) error {
	ret := _m.Called(accountID, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(accountID, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: accountID
func (_m *Handler) Destroy(accountID string) error {
	ret := _m.Called(accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: accountID
func (_m *Handler) Get(accountID string) (*interface{}, error) {
	ret := _m.Called(accountID)

	var r0 *interface{}
	if rf, ok := ret.Get(0).(func(string) *interface{}); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: accountID
func (_m *Handler) GetAll(accountID string) (*[]interface{}, error) {
	ret := _m.Called(accountID)

	var r0 *[]interface{}
	if rf, ok := ret.Get(0).(func(string) *[]interface{}); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: accountID, ID, bin
func (_m *Handler) Update(accountID string, ID string, bin *interface{}) error {
	ret := _m.Called(accountID, ID, bin)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *interface{}) error); ok {
		r0 = rf(accountID, ID, bin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
